#!/usr/bin/env python3
import csv
import datetime
import requests
import operator


FILE_URL="http://marga.com.ar/employees-with-date.csv"

def get_start_date():
    """Interactively get the start date to query for."""

    print()
    print('Getting the first start date to query for.')
    print()
    print('The date must be greater than Jan 1st, 2018')
    year = int(input('Enter a value for the year: '))
    month = int(input('Enter a value for the month: '))
    day = int(input('Enter a value for the day: '))
    print()

    # Return user input as string and only date is shown
    return str(datetime.datetime(year, month, day).date())

def get_file_lines(url):
    """Returns the lines contained in the file at the given URL"""

    # Download the file over the internet
    response = requests.get(url, stream=True)

    # Decode all lines into strings
    lines = []
    for line in response.iter_lines():
        lines.append(line.decode("UTF-8"))
    return lines

# Combined original get_same_or_newer and list_newer functions

def get_same_or_newer(start_date):
    #FILE_URL = "http://marga.com.ar/employees-with-date.csv"
    data = get_file_lines(FILE_URL)
    # Skip first line of CSV
    reader = csv.reader(data[1:])
    # Create a list sorted by date in ascending order
    sortedlist = sorted(reader, key=operator.itemgetter(3))
    # Going through the new sorted list
    for row in sortedlist:
        # Finding and reformating the date
        row_date = datetime.datetime.strptime(row[3], '%Y-%m-%d').strftime("%b %d, %Y")
        # Employee name
        employee = [row[0] + " " + row[1]]
        # If the date is greater than the queried date, pring it
        if row[3] >= start_date:
            print("Started on {}: {}".format(row_date, employee))

def main():
    start_date = get_start_date()
    # Called get_same_or_newer with start_date
    get_same_or_newer(start_date)

if __name__ == "__main__":
    main()
